{
  "version": 3,
  "sources": ["vendor/hyperlit@0.3.6/index.js"],
  "sourcesContent": ["import { h, text } from \"hyperapp\";\n\nconst NEXT = 0;\nconst TEXT = 1;\nconst TAG = 2;\nconst CLOSINGTAG = 3;\nconst TAGNAME = 4;\nconst PROPS = 5;\nconst SELFCLOSING = 6;\nconst PROPNAME = 7;\nconst PROPVAL = 8;\nconst PROPVALSTR = 9;\n\nconst ws = (c) => c == \" \" || c == \"\\t\" || c == \"\\n\" || c == \"\\r\";\n\nconst parse = (strs, vals) => {\n  let tagname,\n    propname,\n    props,\n    parent,\n    list = [],\n    ch,\n    buffer = \"\",\n    mode = NEXT,\n    newline = true;\n\n  const listpush = (x) =>\n    (x || x === 0) &&\n    list.push(\n      typeof x == \"string\" ? text(x) : typeof x == \"number\" ? text(\"\" + x) : x\n    );\n\n  const pushnode = (ch, children = ch.flat(2)) => {\n    listpush(\n      tagname.call ? tagname(props, children) : h(tagname, props, children)\n    );\n    mode = NEXT;\n  };\n\n  const gotText = (trim) => {\n    if (trim) buffer = buffer.trimEnd();\n    buffer && listpush(buffer);\n    newline = false;\n    buffer = \"\";\n  };\n\n  const open = () => {\n    parent = [list, tagname, props, parent];\n    list = [];\n    mode = NEXT;\n  };\n\n  const gotTagName = (m = mode) => {\n    tagname = buffer;\n    buffer = \"\";\n    props = {};\n    mode = m;\n  };\n\n  const defaultProp = (m = mode) => {\n    props[buffer] = true;\n    mode = m;\n    buffer = \"\";\n  };\n\n  const gotProp = (v) => {\n    props[propname] = v;\n    mode = PROPS;\n    buffer = \"\";\n  };\n\n  const close = () => {\n    let children = list;\n    [list, tagname, props, parent] = parent;\n    pushnode(children);\n  };\n\n  for (let j = 0; j < strs.length; j++) {\n    for (let i = 0; i < strs[j].length; i++) {\n      ch = strs[j][i];\n      if (mode == NEXT) {\n        if (ch == \"<\") {\n          mode = TAG;\n        } else if (!ws(ch)) {\n          mode = TEXT;\n          buffer = ch;\n        } else if (ch == \"\\n\") {\n          newline = true;\n        } else if (!newline) {\n          mode = TEXT;\n          buffer = ch;\n        }\n      } else if (mode == TEXT) {\n        if (ch == \"<\") {\n          mode = TAG;\n        } else if (ch == \"\\n\") {\n          gotText(false);\n          newline = true;\n          mode = NEXT;\n        } else {\n          buffer += ch;\n        }\n      } else if (mode == TAG) {\n        if (ch == \"/\") {\n          mode = CLOSINGTAG;\n          gotText(true);\n        } else {\n          mode = TAGNAME;\n          gotText(false);\n          buffer = ch;\n        }\n      } else if (mode == CLOSINGTAG) {\n        if (ch == \">\") close();\n      } else if (mode == TAGNAME) {\n        if (ws(ch)) {\n          gotTagName(PROPS);\n        } else if (ch == \"/\") {\n          gotTagName(SELFCLOSING);\n        } else if (ch == \">\") {\n          gotTagName();\n          open();\n        } else {\n          buffer += ch;\n        }\n      } else if (mode == SELFCLOSING) {\n        if (ch == \">\") {\n          pushnode([]);\n        }\n      } else if (mode == PROPS) {\n        if (ch == \".\") {\n        } else if (ch == \"/\") {\n          mode = SELFCLOSING;\n        } else if (ch == \">\") {\n          open();\n        } else if (!ws(ch)) {\n          buffer = ch;\n          mode = PROPNAME;\n        }\n      } else if (mode == PROPNAME) {\n        if (ch == \"=\") {\n          propname = buffer;\n          mode = PROPVAL;\n        } else if (ch == \">\") {\n          defaultProp();\n          open();\n        } else if (ch == \"/\") {\n          defaultProp(SELFCLOSING);\n        } else if (ws(ch)) {\n          defaultProp(PROPS);\n        } else {\n          buffer += ch;\n        }\n      } else if (mode == PROPVAL) {\n        if (ch == '\"') {\n          mode = PROPVALSTR;\n          buffer = \"\";\n        }\n      } else if (mode == PROPVALSTR) {\n        if (ch == '\"') {\n          gotProp(buffer);\n        } else {\n          buffer += ch;\n        }\n      }\n    }\n    if (mode == TAG) {\n      tagname = vals[j];\n      props = {};\n      mode = PROPS;\n    } else if (mode == TEXT) {\n      gotText(!vals[j]);\n      listpush(vals[j]);\n    } else if (mode == PROPS) {\n      props = { ...props, ...vals[j] };\n    } else if (mode == PROPVAL) {\n      gotProp(vals[j]);\n    } else if (mode == PROPVALSTR) {\n      buffer += vals[j];\n    } else if (mode == NEXT && vals[j] != null) {\n      listpush(vals[j]);\n    }\n  }\n  list = list.flat(2);\n  return list.length > 1 ? list : list[0];\n};\n\nexport default (strs, ...vals) => parse(strs, vals);\n"],
  "mappings": "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",
  "names": ["h", "text", "NEXT", "TEXT", "TAG", "CLOSINGTAG", "TAGNAME", "PROPS", "SELFCLOSING", "PROPNAME", "PROPVAL", "PROPVALSTR", "ws", "c", "parse", "strs", "vals", "tagname", "propname", "props", "parent", "list", "ch", "buffer", "mode", "newline", "listpush", "x", "pushnode", "children", "gotText", "trim", "open", "gotTagName", "m", "defaultProp", "gotProp", "v", "close", "j", "i", "hyperlit_0_3_default"]
}
